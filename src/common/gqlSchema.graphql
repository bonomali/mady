input CompileTranslationsInput {
  storyId: String
  clientMutationId: String
}

type CompileTranslationsPayload {
  clientMutationId: String
}

type Config implements Node {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
  msgFunctionNames: [String]
  msgRegexps: [String]
  fMinify: Boolean
  fJsOutput: Boolean
  fJsonOutput: Boolean
  fReactIntlOutput: Boolean

  # The ID of an object
  id: ID!
}

input ConfigUpdate {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
  msgFunctionNames: [String]
  msgRegexps: [String]
  fMinify: Boolean
  fJsOutput: Boolean
  fJsonOutput: Boolean
  fReactIntlOutput: Boolean
}

input CreateKeyInViewerKeysInput {
  set: KeyCreate
  unset: [String]
  parentId: ID!
  storyId: String
  clientMutationId: String
}

type CreateKeyInViewerKeysPayload {
  viewer: Viewer
  key: Key
  parent: Viewer
  createdKeyEdge: KeyEdge
  clientMutationId: String
}

input CreateTranslationInKeyTranslationsInput {
  set: TranslationCreate
  unset: [String]
  parentId: ID!
  storyId: String
  clientMutationId: String
}

type CreateTranslationInKeyTranslationsPayload {
  viewer: Viewer
  translation: Translation
  parent: Key
  createdTranslationEdge: TranslationEdge
  clientMutationId: String
}

input DeleteKeyInViewerKeysInput {
  id: ID!
  parentId: ID!
  storyId: String
  clientMutationId: String
}

type DeleteKeyInViewerKeysPayload {
  viewer: Viewer
  deletedKeyId: ID
  parent: Viewer
  clientMutationId: String
}

input DeleteTranslationInput {
  id: ID!
  storyId: String
  clientMutationId: String
}

type DeleteTranslationPayload {
  viewer: Viewer
  deletedTranslationId: ID
  clientMutationId: String
}

type Key implements Node {
  # The ID of an object
  id: ID!
  context: String
  text: String
  description: String
  firstUsed: String
  unusedSince: String
  sources: [String]
  translations(after: String, first: Int, before: String, last: Int): TranslationConnection
}

# A connection to a list of items.
type KeyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [KeyEdge]
}

input KeyCreate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

# An edge in a connection.
type KeyEdge {
  # The item at the end of the edge
  node: Key

  # A cursor for use in pagination
  cursor: String!
}

input KeyUpdate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

type Mutation {
  updateConfig(input: UpdateConfigInput!): UpdateConfigPayload
  createKeyInViewerKeys(input: CreateKeyInViewerKeysInput!): CreateKeyInViewerKeysPayload
  deleteKeyInViewerKeys(input: DeleteKeyInViewerKeysInput!): DeleteKeyInViewerKeysPayload
  updateKey(input: UpdateKeyInput!): UpdateKeyPayload
  parseSrcFiles(input: ParseSrcFilesInput!): ParseSrcFilesPayload
  createTranslationInKeyTranslations(input: CreateTranslationInKeyTranslationsInput!): CreateTranslationInKeyTranslationsPayload
  deleteTranslation(input: DeleteTranslationInput!): DeleteTranslationPayload
  updateTranslation(input: UpdateTranslationInput!): UpdateTranslationPayload
  compileTranslations(input: CompileTranslationsInput!): CompileTranslationsPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input ParseSrcFilesInput {
  storyId: String
  clientMutationId: String
}

type ParseSrcFilesPayload {
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
  viewer: Viewer
  clientMutationId: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type Translation implements Node {
  # The ID of an object
  id: ID!
  lang: String
  translation: String
  fuzzy: Boolean
  keyId: ID
}

# A connection to a list of items.
type TranslationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TranslationEdge]
}

input TranslationCreate {
  lang: String
  translation: String
  fuzzy: Boolean
  keyId: ID
}

# An edge in a connection.
type TranslationEdge {
  # The item at the end of the edge
  node: Translation

  # A cursor for use in pagination
  cursor: String!
}

input TranslationUpdate {
  translation: String
  fuzzy: Boolean
}

input UpdateConfigInput {
  set: ConfigUpdate
  unset: [String]
  storyId: String
  clientMutationId: String
}

type UpdateConfigPayload {
  viewer: Viewer
  config: Config
  clientMutationId: String
}

input UpdateKeyInput {
  id: ID!
  set: KeyUpdate
  unset: [String]
  storyId: String
  clientMutationId: String
}

type UpdateKeyPayload {
  viewer: Viewer
  key: Key
  clientMutationId: String
}

input UpdateTranslationInput {
  id: ID!
  set: TranslationUpdate
  unset: [String]
  storyId: String
  clientMutationId: String
}

type UpdateTranslationPayload {
  viewer: Viewer
  translation: Translation
  clientMutationId: String
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  config: Config
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
  translations(after: String, first: Int, before: String, last: Int): TranslationConnection
  anyNode(id: ID): Node
}
